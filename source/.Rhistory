# Extract the transmission tree
ttree<-extractTTree(simu)
# Plot type 1
plot(ttree)
# Plot type 2
plot(ttree,type='detailed',w.shape,w.scale)
# Extract the phylogeny
ptree<-extractPTree(simu)
# Abd plot it
plot(ptree)
p<-phyloFromPTree(ptree)
class(p)
plot(p)
axisPhylo(backward = F)
write.tree(p,'my_simulated_tree.nwk')
last_date <- dateLastSample(simu)
last_date
plot(p)
axisPhylo(backward = F)
ptree<-ptreeFromPhylo(p,dateLastSample=2007.964)
plot(ptree)
w.shape=10
w.scale=0.1
dateT=2008
res<-inferTTree(ptree,mcmcIterations=1000,w.shape=w.shape,w.scale=w.scale,dateT=dateT)
plot(res)
mcmc=convertToCoda(res)
effectiveSize(mcmc)
res<-inferTTree(ptree,mcmcIterations=10000,w.shape=w.shape,w.scale=w.scale,dateT=dateT)
res
plot(res)
mcmc=convertToCoda(res)
effectiveSize(mcmc)
# Find the medoid tree
med=medTTree(res)
# Plot it
plot(med)
# Extract and plot the transmission tree
ttree=extractTTree(med)
plot(ttree,type='detailed',w.shape,w.scale)
par(mfrow=c(1,2),oma = c(0, 0, 2, 0))
plot(simu)
plot(med)
mtext("Comparison of true tree (left) and medoid tree (right)", outer = TRUE, cex = 1.5)
mat=computeMatWIW(res)
lattice::levelplot(mat,xlab='',ylab='')
mat=computeMatTDist(res)
lattice::levelplot(mat,xlab='',ylab='')
a=getIncidentCases(res,show.plot = T)
a=getGenerationTimeDist(res,show.plot = T)
a=getSamplingTimeDist(res,show.plot = T)
a=getInfectionTimeDist(res,k=c('1','2'),show.plot = T)
a=getOffspringDist(res,k=c('1','2'),show.plot = T)
library(TransPhylo)
library(ape)
library(coda)
library(lubridate)
library(phytools)
set.seed(0)
ph <- read.nexus("roetzer2013_datedtree.nex")# the TB .nex tree provided in Ex4
library(TransPhylo)
library(ape)
library(coda)
library(lubridate)
library(phytools)
set.seed(0)
ph <- read.nexus("roetzer2013_datedtree.nex")# the TB .nex tree provided in Ex4
metadata <- read.table("roetzer_dates.txt")
# this phylogeny has the samples in a different order (i.e. not 1...86), so lets
# reorder the metadata to match:
metadata <- metadata[as.numeric(ph$tip.label),]
ph
names(ph)
ph$tip.label
metadata
library(TransPhylo)
library(ape)
library(coda)
library(lubridate)
library(phytools)
set.seed(0)
ph <- read.nexus("roetzer2013_datedtree.nex")# the TB .nex tree provided in Ex4
metadata <- read.table("roetzer_dates.txt")
# this phylogeny has the samples in a different order (i.e. not 1...86), so lets
# reorder the metadata to match:
metadata <- metadata[as.numeric(ph$tip.label),]
# Convert to decimal date type
dates <- decimal_date(as.Date(metadata))
dates
ph <- multi2di(ph)
ph$edge.length <- pmax(ph$edge.length,1/365)
# Plot the phylogeny
plot(ph)
# We convert the phylogeny to a ptree object and plot it, aligning the time
ptree <- ptreeFromPhylo(ph,dateLastSample=(max(dates)))
plot(ptree)
# TB: gen time ~ gamma(shape = 1.3, rate = 0.3) years, samp time ~ gamma(shape = 1.1, rate = 0.4) years
w.shape=1.3
w.scale=1/0.3 # scale is 1/rate
ws.shape=1.1
ws.scale=1/0.4
# set dateT - the time observation stopped.
# We set this to a a little while after the last sampling date to avoid
# lots of unsampled cases towards the tips
dateT=max(dates)+ 30/365 # let's use about 1 month later
dateT
# I'm using a small number of iterations, just for a preliminary run. You will want to increase
# this in order to get better results - we should use our MCMC diagnostics to confirm if we have enough
# iterations (trace plots, ESS)
res<-inferTTree(ptree,mcmcIterations=5000,w.shape=w.shape,w.scale=w.scale,
ws.shape=ws.shape,ws.scale=ws.scale, dateT=dateT, startPi=0.9,
updatePi=F, updateNeg = TRUE)
plot(res)
# I'm using a small number of iterations, just for a preliminary run. You will want to increase
# this in order to get better results - we should use our MCMC diagnostics to confirm if we have enough
# iterations (trace plots, ESS)
res<-inferTTree(ptree,mcmcIterations=5000,w.shape=w.shape,w.scale=w.scale,
ws.shape=ws.shape,ws.scale=ws.scale, dateT=dateT, startPi=0.5,
updatePi=F, updateNeg = TRUE)
plot(res)
# For 5000 iterations the mixing of the posterior looks alright, but I would run this
# for longer to get better estimates of Ne*g and R. Note that the pi plot is flat because we
# don't update pi (updatePi=F).
mcmc=convertToCoda(res)
effectiveSize(mcmc)
# Get the medoid tree
med=medTTree(res)
plot(med)
# Plot the transmission tree of the medoid
ttree=extractTTree(med)
plot(ttree,type='detailed',w.shape,w.scale)
# Plot the matrix of the probability of direct transmission
mat=computeMatWIW(res)
lattice::levelplot(mat,xlab='',ylab='')
# Plot the matrix of how many intermediates
mat=computeMatTDist(res)
lattice::levelplot(mat,xlab='',ylab='')
# Additional figures
a=getIncidentCases(res,show.plot = T)
# A pretty high sampling rate - with most of the unsampled ones towards the tips.
# This is further evidence we might want to increase dateT
a=getGenerationTimeDist(res,show.plot = T)
a=getSamplingTimeDist(res,show.plot = T)
# Pick 2 of our case to look closer at:
# (You can check the case labels by entering 'ph$tip.label' to the console)
a=getInfectionTimeDist(res,k=c('1','2'),show.plot = T)
a=getOffspringDist(res,k=c('1','2'),show.plot = T)
library(visNetwork)
library(RColorBrewer)
source("transphylo_extras.R")
install.packages("visNetwork")
mywiw=computeMatWIW(res)
mynp = networkPlot(res[[1]]$ctree,showTimes = TRUE,shapefactor = 3)
modnp=mynp
modnp$edges$width=1
modnp$nodes$label=as.character(modnp$nodes$label)
modnp$nodes$label[which(modnp$nodes$groups=="unsampled")]="unsamp"
modnp$nodes$font.size=ifelse(modnp$nodes$groups == "sampled", 20, 10)
visNetwork(modnp$nodes,modnp$edges,width = "900px",height="600px") %>%
visLegend(width=0.2,addNodes=mynp$lnodes,useGroups=F)   #%>% visSave(file="demo.html")
# I'm using a small number of iterations, just for a preliminary run. You will want to increase
# this in order to get better results - we should use our MCMC diagnostics to confirm if we have enough
# iterations (trace plots, ESS)
res<-inferTTree(ptree,mcmcIterations=5000,w.shape=w.shape,w.scale=w.scale,
ws.shape=ws.shape,ws.scale=ws.scale, dateT=dateT, startPi=0.8,
updatePi=F, updateNeg = TRUE)
plot(res)
# For 5000 iterations the mixing of the posterior looks alright, but I would run this
# for longer to get better estimates of Ne*g and R. Note that the pi plot is flat because we don't
# update pi (updatePi=F).
mcmc=convertToCoda(res)
effectiveSize(mcmc)
# Get the medoid tree
med=medTTree(res)
plot(med)
# Plot the transmission tree of the medoid
ttree=extractTTree(med)
plot(ttree,type='detailed',w.shape,w.scale)
# Plot the matrix of the probability of direct transmission
mat=computeMatWIW(res)
lattice::levelplot(mat,xlab='',ylab='')
# Plot the matrix of how many intermediates
mat=computeMatTDist(res)
lattice::levelplot(mat,xlab='',ylab='')
# Additional figures
a=getIncidentCases(res,show.plot = T)
# A pretty high sampling rate - with most of the unsampled ones towards the tips.
# This is further evidence we might want to increase dateT
a=getGenerationTimeDist(res,show.plot = T)
a=getSamplingTimeDist(res,show.plot = T)
# Pick 2 of our case to look closer at:
# (You can check the case labels by entering 'ph$tip.label' to the console)
a=getInfectionTimeDist(res,k=c('1','2'),show.plot = T)
a=getOffspringDist(res,k=c('1','2'),show.plot = T)
library(visNetwork)
library(RColorBrewer)
source("transphylo_extras.R")
install.packages("visNetwork")
mywiw=computeMatWIW(res)
mynp = networkPlot(res[[1]]$ctree,showTimes = TRUE,shapefactor = 3)
modnp=mynp
modnp$edges$width=1
modnp$nodes$label=as.character(modnp$nodes$label)
modnp$nodes$label[which(modnp$nodes$groups=="unsampled")]="unsamp"
modnp$nodes$font.size=ifelse(modnp$nodes$groups == "sampled", 20, 10)
visNetwork(modnp$nodes,modnp$edges,width = "900px",height="600px") %>%
visLegend(width=0.2,addNodes=mynp$lnodes,useGroups=F)   #%>% visSave(file="demo.html")
# Inferred infection times for a chosen host
hist(getInfectionTimes(res,k=c("1")))
# Get the generation times  and sampling times in the medoid tree
# (this could be useful if you really believed in your medoid tree)
hist(getGenerationTimes(med))
hist(getTimesToSampling(med))
# Get the number of unsampled cases in the medoid tree
getNumberUnsampled(med)
## Exercise 4 - TransPhylo
library(TransPhylo)
library(ape)
library(coda)
library(lubridate)
library(phytools)
set.seed(0)
ph <- read.nexus("roetzer2013_datedtree.nex")# the TB .nex tree provided in Ex4
metadata <- read.table("roetzer_dates.txt")
# this phylogeny has the samples in a different order (i.e. not 1...86), so lets
# reorder the metadata to match:
metadata <- metadata[as.numeric(ph$tip.label),]
# Convert to decimal date type
dates <- decimal_date(as.Date(metadata))
# normally we might run these below lines, but actually we don't have any in this
# tree (though it wouldn't hurt if you did run them):
#ph <- multi2di(ph) # remove multifurcations
#ph$edge.length <- pmax(ph$edge.length,1/365) # make sure all branch lengths are at least 1 day
# Plot the phylogeny
plot(ph)
# We convert the phylogeny to a ptree object and plot it, aligning the time
ptree <- ptreeFromPhylo(ph,dateLastSample=(max(dates)))
plot(ptree)
# The MRCA (most recent common ancestor) goes back to 1990. This seems reasonable for slow-transmitting and -evolving TB
# TB: gen time ~ gamma(shape = 1.3, rate = 0.3) years, samp time ~ gamma(shape = 1.1, rate = 0.4) years
w.shape=1.3
w.scale=1/0.3 # scale is 1/rate
ws.shape=1.1
ws.scale=1/0.4
# set dateT - the time observation stopped.
# We set this to a a little while after the last sampling date to avoid
# lots of unsampled cases towards the tips
dateT=max(dates)+ 30/365 # let's use about 1 month later
dateT
#-----------------------------------------------------------
##MCMC
# I'm using a small number of iterations, just for a preliminary run. You will want to increase
# this in order to get better results - we should use our MCMC diagnostics to confirm if we have enough
# iterations (trace plots, ESS)
res<-inferTTree(ptree,mcmcIterations=5000,w.shape=w.shape,w.scale=w.scale,
ws.shape=ws.shape,ws.scale=ws.scale, dateT=dateT, startPi=0.8,
updatePi=F, updateNeg = TRUE)
# We can turn on/off the estimation of different parameters depending on how good the
# estimation is, and what we are interested to learn/how much prior knowledge we have.
# I have turned off updating Pi here - but you could update it. For this analysis, where we
# don't have a good idea of the true sampling rate, I would definitely want to turn the pi
# update on once I'm confident the rest of my analysis is working as intended
plot(res)
# For 5000 iterations the mixing of the posterior looks alright, but I would run this
# for longer to get better estimates of Ne*g and R. Note that the pi plot is flat because we don't
# update pi (updatePi=F).
mcmc=convertToCoda(res)
effectiveSize(mcmc)
# Yes, the effective sample size of Neg is low as the trace plots suggested.
# Get the medoid tree
med=medTTree(res)
plot(med)
# We are getting a fair number of unsampled cases near the tips, so we might want to increase dateT
# Plot the transmission tree of the medoid
ttree=extractTTree(med)
plot(ttree,type='detailed',w.shape,w.scale)
# it's a little hard to read this with so many cases, it's better for smaller outbreaks
# If you've already also run the covid analysis, you'll notice how much longer the infections go on for.
# Plot the matrix of the probability of direct transmission
mat=computeMatWIW(res)
lattice::levelplot(mat,xlab='',ylab='')
# There's a lot of low probability pairs - though at least a handful of very certain ones
# (Lots of low prob. pairs is actually a good thing - it means our sampled transmission trees are all somewhat similar)
# Plot the matrix of how many intermediates
mat=computeMatTDist(res)
lattice::levelplot(mat,xlab='',ylab='')
# Interesting pattern! Some patches of very distant cases - these are probably opposite clades of the tree
# Additional figures
a=getIncidentCases(res,show.plot = T)
# A pretty high sampling rate - with most of the unsampled ones towards the tips.
# This is further evidence we might want to increase dateT
a=getGenerationTimeDist(res,show.plot = T)
a=getSamplingTimeDist(res,show.plot = T)
# Both between 0 and 2 years
# Pick 2 of our case to look closer at:
# (You can check the case labels by entering 'ph$tip.label' to the console)
a=getInfectionTimeDist(res,k=c('1','2'),show.plot = T)
a=getOffspringDist(res,k=c('1','2'),show.plot = T)
## VisNetwork
library(visNetwork)
library(RColorBrewer)
source("transphylo_extras.R")
# this .R file needs to be in your working directory, else you will need to change the path
mywiw=computeMatWIW(res)
mynp = networkPlot(res[[1]]$ctree,showTimes = TRUE,shapefactor = 3)
modnp=mynp
modnp$edges$width=1
modnp$nodes$label=as.character(modnp$nodes$label)
modnp$nodes$label[which(modnp$nodes$groups=="unsampled")]="unsamp"
modnp$nodes$font.size=ifelse(modnp$nodes$groups == "sampled", 20, 10)
visNetwork(modnp$nodes,modnp$edges,width = "900px",height="600px") %>%
visLegend(width=0.2,addNodes=mynp$lnodes,useGroups=F)   #%>% visSave(file="demo.html")
# uncomment the last section to save the network to html
# Even though we don't think this MCMC run was particularly great (too early dateT
# and too few iterations), we still get some nice clusters of cases.
## Other additional analyses
# Inferred infection times for a chosen host
hist(getInfectionTimes(res,k=c("1")))
# Get the generation times  and sampling times in the medoid tree
# (this could be useful if you really believed in your medoid tree)
hist(getGenerationTimes(med))
hist(getTimesToSampling(med))
# Get the number of unsampled cases in the medoid tree
getNumberUnsampled(med)
# 44 unsampled cases compared to our 86 sampled
library(TransPhylo)
library(ape)
library(coda)
library(lubridate)
library(phytools)
set.seed(0)
ph <- read.nexus("roetzer2013_datedtree.nex")# the TB .nex tree provided in Ex4
metadata <- read.table("roetzer_dates.txt")
ph
# this phylogeny has the samples in a different order (i.e. not 1...86), so lets
# reorder the metadata to match:
metadata <- metadata[as.numeric(ph$tip.label),]
# Convert to decimal date type
dates <- decimal_date(as.Date(metadata))
dates
# Plot the phylogeny
plot(ph)
# We convert the phylogeny to a ptree object and plot it, aligning the time
ptree <- ptreeFromPhylo(ph,dateLastSample=(max(dates)))
plot(ptree)
# TB: gen time ~ gamma(shape = 1.3, rate = 0.3) years, samp time ~ gamma(shape = 1.1, rate = 0.4) years
w.shape=1.3
w.scale=1/0.3 # scale is 1/rate
ws.shape=1.1
ws.scale=1/0.4
# set dateT - the time observation stopped.
# We set this to a a little while after the last sampling date to avoid
# lots of unsampled cases towards the tips
dateT=max(dates)+ 30/365 # let's use about 1 month later
dateT
res
plot(res)
# For 5000 iterations the mixing of the posterior looks alright, but I would run this
# for longer to get better estimates of Ne*g and R. Note that the pi plot is flat because we don't
# update pi (updatePi=F).
mcmc=convertToCoda(res)
effectiveSize(mcmc)
# Get the medoid tree
med=medTTree(res)
plot(med)
# Plot the transmission tree of the medoid
ttree=extractTTree(med)
plot(ttree,type='detailed',w.shape,w.scale)
# Plot the matrix of the probability of direct transmission
mat=computeMatWIW(res)
lattice::levelplot(mat,xlab='',ylab='')
# Plot the matrix of how many intermediates
mat=computeMatTDist(res)
lattice::levelplot(mat,xlab='',ylab='')
library(visNetwork)
library(RColorBrewer)
source("transphylo_extras.R")
mywiw=computeMatWIW(res)
mynp = networkPlot(res[[1]]$ctree,showTimes = TRUE,shapefactor = 3)
modnp=mynp
modnp$edges$width=1
modnp$nodes$label=as.character(modnp$nodes$label)
modnp$nodes$label[which(modnp$nodes$groups=="unsampled")]="unsamp"
modnp$nodes$font.size=ifelse(modnp$nodes$groups == "sampled", 20, 10)
visNetwork(modnp$nodes,modnp$edges,width = "900px",height="600px") %>%
visLegend(width=0.2,addNodes=mynp$lnodes,useGroups=F)   #%>% visSave(file="demo.html")
## Exercise 4 - TransPhylo
library(TransPhylo)
library(ape)
library(coda)
library(lubridate)
library(phytools)
set.seed(0)
ph <- read.nexus("covid_datedtree.nex")# a timed phylogeny for the COVID data (made in iqtree2)
metadata_b113 <- read.csv("metadata_B.1.13.csv",header=T)
# this phylogeny has the samples in a different order to before, so lets reorder the metadata to match:
metadata_b113 <- metadata_b113[order(match(metadata_b113$sequence_name,ph$tip.label)),]
# test the labels match:
identical(ph$tip.label, as.vector(metadata_b113$sequence_name)) #True - nice!
# get dates into the right format - we only need a date to set the phylogeny in time,
# so let's label the first sample as 'day 0' and work from there.
dates <- as.Date(metadata_b113$sample_date)
length_time <- as.numeric(max(dates) -  min(dates))
# remove any multifurcations:
ph <- multi2di(ph)
# do we have any negative branch lengths?
sum(ph$edge.length<0) # no! good news, we don't need to do anything
# we see that this phylogeny is quite 'short', since all the genomes were sampled at a
# similar time and have low diversity.
plot(ph)
# We convert the phylogeny to a ptree object and plot it, aligning the time
ptree <- ptreeFromPhylo(ph,dateLastSample=length_time)
plot(ptree)
# The first sample was collected on day 0, the final sample was collected on day 19,
# and the most recent common ancestor of all samples (the root of the tree), was inferred
# in the tree building to be collected around day -50.
# COVID-19: gen time ~ gamma(mean = 5.2 days, sd = 1.72 days), samp time ~ gamma(mean = 5.2 days, sd = 1.72 days)
# we convert to the shape and scale of a gamma distribution:
# Shape = mean^2/sd^2, Scale = sd^2/mean
w.shape=(5.2^2)/(1.72^2)
w.scale=(1.72^2)/5.2
ws.shape=(5.2^2)/(1.72^2)
ws.scale=(1.72^2)/5.2
# set dateT - the time observation stopped.
# We set this to a a little while after the last sampling date to avoid
# lots of unsampled cases towards the tips
dateT=length_time + 14
#-----------------------------------------------------------
##MCMC
# I'm using a small number of iterations, just for a preliminary run. You will want to increase
# this in order to get better results - we should use our MCMC diagnostics to confirm if we have enough
# iterations (trace plots, ESS)
res<-inferTTree(ptree,mcmcIterations=5000,w.shape=w.shape,w.scale=w.scale,
ws.shape=ws.shape,ws.scale=ws.scale, dateT=dateT, startPi=0.9, updatePi=F)
# We can turn on/off the estimation of different parameters depending on how good the
# estimation is, and what we are interested to learn/how much prior knowledge we have
# I have turned off updating Pi here and assumed high sampling, but you could update it
# instead if you wish. For this analysis, where we don't have a good idea of the true sampling
# rate but it's probably quite low, I would definitely want to turn the pi update on once I'm
# confident the rest of my analysis is working as intended
plot(res)
# Even for just 5000 iterations the mixing looks fair. Note that the pi plot is flat
#because we don't update pi (updatePi=F).
mcmc=convertToCoda(res)
effectiveSize(mcmc)
# Th effective sample size of neg is low though - we should probably increase the number of iterations
# Plot the medoid tree
med=medTTree(res)
plot(med)
# Looks like quite a lot of unsampled cases - this suggests we might be fixing pi too high
# Plot the transmission tree of the medoid - will be hard to read for so many cases
ttree=extractTTree(med)
plot(ttree,type='detailed',w.shape,w.scale)
# Plot the matrix of the probability of direct transmission
mat=computeMatWIW(res)
lattice::levelplot(mat,xlab='',ylab='')
# There's a lot of low probability pairs - though at least a handful of very certain ones.
# Plot the matrix of how many intermediates
mat=computeMatTDist(res)
lattice::levelplot(mat,xlab='',ylab='')
# Additional figures
a=getIncidentCases(res,show.plot = T)
# Most unsampled cases are back in time -  this is sensible considering the 2 geographic
# locations of our samples and their relatively close sampling in time (seems unlikely
# there is an index case close to our samples)
a=getGenerationTimeDist(res,show.plot = T)
a=getSamplingTimeDist(res,show.plot = T)
# Pick 2 of our cases to look closer at:
# (You can check the case labels by entering 'ph$tip.label' to the console)
a=getInfectionTimeDist(res,k=c("England/BRIS-121DF2/2020","England/BRIS-121E0E/2020"),show.plot = T)
a=getOffspringDist(res,k=c("England/BRIS-121DF2/2020","England/BRIS-121E0E/2020"),show.plot = T)
# I have not included code for it here, but it would be interesting to look at if transmission
# seems to be clustered by location (BRIS - Bristol, CAMB = Cambridge)
## VisNetwork
library(visNetwork)
library(RColorBrewer)
source("transphylo_extras.R")
# this .R file needs to be in your working directory, else you will need to change the path
mywiw=computeMatWIW(res)
mynp = networkPlot(res[[1]]$ctree,showTimes = TRUE,shapefactor = 3)
modnp=mynp
modnp$edges$width=1
modnp$nodes$label=as.character(modnp$nodes$label)
modnp$nodes$label[which(modnp$nodes$groups=="unsampled")]="unsamp"
modnp$nodes$font.size=ifelse(modnp$nodes$groups == "sampled", 20, 10)
visNetwork(modnp$nodes,modnp$edges,width = "900px",height="600px") %>%
visLegend(width=0.2,addNodes=mynp$lnodes,useGroups=F) #%>% visSave(file="demo.html")
# uncomment the last section to save the network to html
# the tip names are really long which causes the bubbles to be giant!
# You can edit the labels by changing modnp$nodes$label to something shorter
## Other additional analyses
# Inferred infection times for the chosen host
hist(getInfectionTimes(res,k=c("England/BRIS-121DF2/2020")))
# This bimodality might refer to a choice between 2 potential infectors
# Get the generation times  and sampling times in the medoid tree
# (this could be useful if you really believed in your medoid tree)
hist(getGenerationTimes(med))
hist(getTimesToSampling(med))
# Get the number of unsampled cases in the medoid tree
getNumberUnsampled(med)
# 59 unsampled cases compared to our 40 sampled
install.packages("visNetwork")
visNetwork(modnp$nodes,modnp$edges,width = "900px",height="600px") %>%
visLegend(width=0.2,addNodes=mynp$lnodes,useGroups=F) #%>% visSave(file="demo.html")
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(outbreaker2)
library(Hmisc)
library(lubridate)
library(EpiEstim)
set.seed(1) # You can put whatever number you want into the set.seed function
library(TransPhylo)
